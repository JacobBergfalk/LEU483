*** Exercises Set 0 ***

PLEASE READ THE TEXT BELOW CAREFULLY!!!

This set of exercises intended to get slowly started with programming.

Create a directory (folder) named leu483 in some well-known location (Z:\...).
Use it to store all downloaded files (exercise sets and assignments).

If you don't have such a directory right now close CodeLite, create the directory and
move this folder that contains the CodeLite workspace and its subfolders to that directory.

After unzipping, this folder contains:
- set0/EXERCISES0.txt (this file): Instructions for exercises of set 0.
- set0/set0.workspace: Start CodeLite, go to Workspace>Open Workspace and load the file set0.workspace.
All the projects that belong to this Workspace will appear in the Workspace pane on the left.
Each exercise is a single project.
Below are the exercises. You just need to work on the .c files, you can ignore the .project files.
- set0/helloworld/: helloworld.c  helloworld.project: tasks 1-4
- set0/pieces/: pieces.c  pieces.project. tasks 5-8
- set0/fixme/: fixme.c  fixme.project: task 9

Note that new files and folders will be automatically generated by CodeLite once 
you start compiling your codes.

1. Once the workspace is openened, activate the project helloworld (double click on the folder 
icon named helloworld, in the Workspace pane, on the left, or right click on helloworld > Make active). 
Helloworld is now displayed in bold font. Still in the Workspace pane, open the "src" folder 
and double click helloworld.c. The file will open in the main window of Codelite, 
where you can edit it. In the Workspace pane you will also see 'helloworld :: Windows'. If you are using
Linux or macOS, click on it and select your platform.
You can run the program by clicking on the icon of the green person running. You might get a pop-up window
with the text "Could not find selected compiler...". Select MinGW if you are working on Windows, else
GCC if you are working in Linux or macOS.

Make sure that you are executing the correct program. Only the code in the activated 
project (that is in bold font) will run.

What does the program print out?

2. Replace the text the program prints out with another text ("Yay! It's
working!"), and run the program.

3. Add another print statement, which prints out "By January I'll be a great
programmer.", and run the program.

4. Combine the two print statements into a single print statement, such that
when you run the program it is displayed:
    Yay! It's working!
    By January I'll be a great programmer.
Did you include \n in the print statement? What does \n do? What does \n\n\n do?

5. Open and run pieces.c. Make sure that you execute the correct program.
Check that the project is activated, as explained above. Why is
there no output?

6. Print out the value of the variable called pieces. Computers are not very
smart, so you'll have to tell the computer what kind of variable it has to handle
(here it's an integer number). You do this by writing "%d" (including the
quotation marks) and adding a comma in front of the variable you want to print.
(Note, for other variables in future exercises you may have to print other
types. So, "%d" doesn't work every time.)

7. Change the values of the two variables chairs and tables and re-run your
program. Check, if the printed-out results are correct.

8. Increase the value of the variable pieces by 2 and check by printing out the
result if it worked.

9. Open fixme.c. This program should print out 2, but it does not work if you try
to run it: you should get an error mesage. Can you fix the program?
Reading the error message can help you. You can also check the code in pieces.c.

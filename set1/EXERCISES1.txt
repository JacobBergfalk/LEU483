*** Exercises Set 1 ***

PLEASE READ THE TEXT BELOW CAREFULLY!!!

Create a directory (folder) named leu483 in some well-known location (Z:\...).
Use it to store all downloaded files (exercise sets and assignments).

If you don't have such a directory right now close CodeLite, create the directory and
move this folder that contains the CodeLite workspace and its subfolders to that directory.

After unzipping, this folder contains:
- set1/EXERCISES1.txt (this file): Instructions for exercises of set 1.
- set1/set1.workspace: Start CodeLite, go to Workspace>Open Workspace and load the file set1.workspace.
All the projects that belong to this Workspace will appear in the Workspace pane on the left.
The Workspace contains exercises (you solve) and samples (ready-to-run examples that you can study)
- the exercises, organized in folders

To run any exercise or sample:
  - Look in the Worskspace pane on the left and activate (double click or right click 
    on the project > Make active) the project you aim at running
  - Open the gray src folder and double click the program file, that ends with ".c"
  - The program opens in the main window of CodeLite. You can edit it there.
  - Once you think your code is ready:
    - Double check the platform shown in the Workspace pane to match your platform
      ("nameofexercise :: platform", where platform is Windows, Linux or macOS)
    - Click on the icon of the green person running
    (also see Toolbar>Build for key shortcuts)
  - A new window will pop up showing the output of the program.

!! Don't forget to activate (double click or right click on the project > Make active) the 
project you aim at running. !! Otherwise you may edit one code but mistakenly run another one.

Note that new files and folders will be automatically generated by CodeLite once
you start compiling your codes.

Do as many exercises as possible *BUT* you can't spend all your time here.
Assignments are mandatory and need time. Decide when to switch to the first assignment.
Use the leftover exercises as recap for the exam.

*** Exercises 1-6 will prepare for Assignment 1 ***

Exercises
---------

1.  See file ex1rectangle.c. This is a program to calculate the area of a rectangle.

    NOTE: In the file's topmost comment there's a remark "Samples:". The remark lists
    useful example programs from the samples directory. If stuck inspect the sample programs,
    run them, explore them, experiment, ...
    Also, there are plenty of comments. Read them!

    Example output from the ex1rectangle program:

    Program to calculate the area of a rectangle
    Input the width of the rectangle: 2.1
    Input the height of the rectangle: 3.5
    The area of the rectangle is : 7.35

    In the print statement, what happens if you replace `%.2f` with `%.5f` or `%d`?


2.  See ex2deg_to_rad.c. Convert degrees to radians or reverse.
    Examples output from program:

    Select                 (first run)
    1) For deg to rad
    2) For rad to deg
    > 1
    Input angle in deg: 90
    90.0000 deg = 1.5708 rad

    Select                 (another run)
    1) For deg to rad
    2) For rad to deg
    > 2
    Input angle in rad: 3.1485
    3.1485 rad = 180.3958 deg

    NOTE: In the Menu, select Code > Reformat Code. There possibly is a keyboard
    shortcut defined for this command (Ctrl + Alt + l).

    *** Use the keyboard shortcut frequently to reformat the code.
        This will make the code very much easier to understand! ***

    If no keyboard short cut, select Menu: File > Settings ... > Main menu > Code >
    Select Reformat Code and press "Ctrl" and "<" simultaneously. Will create shortcut "Ctrl <"


3.  See ex3factorial.c. Calculate the factorial function.
    https://en.wikipedia.org/wiki/Factorial.
    NOTE: Value of function increases very fast. Use type long long int
    to store the result.

    Example output from program:

    Enter an integer (less than 20): 3        (first run)
    Factorial = 6

    Enter an integer (less than 20): 6        (second run)
    Factorial = 720

    Enter an integer (less than 20): 15       (last run)
    Factorial = 1307674368000


4.  See ex4sum_avg.c. Implement a program to calculate the sum and average
    of some non-negative integers. Example run:

    Calculate sum and average (-1 to quit)
    > 1
    > 2
    > 3
    > -1
    Sum = 6 Avg = 2.000000

    HINT: If you can do it once, ... just surround with a loop to do it more times!

5.  If you haven't covered functions in the lectures yet, take a look at e.g.:
      - Chapter 6 (p 101) in the book "C från början"
      - https://www.learn-c.org/en/Functions
      - https://sv.wikibooks.org/wiki/C-programmering#Funktioner

    See ex5function.c. Implement all functions so that the program outputs
    ok
    ok
    ok
    ok
    ok
    ...    (for all)

    Start with the square function.


6.  See ex6fiddling.c. Here we fiddle with an int, moving digits around and more
    Make program output ok-s like above (except for last two, which print values).
    NOTE: Very heavy use of / (integer division) and % (integer remainder, modulo).
    NOTE: Some function may be useful for other functions! Reuse if possible!


7.  See ex7practise.c. Implement a program for multiplication training. You don't
    need any functions here, just write the complete program in main.

    Example output from program:

    Multiplication practise!
    Select table (2-9) to train (-1 to quit): 6
    3 * 6 = 18
    Correct!
    5 * 6 = 30
    Correct!
    7 * 6 = 44
    Sorry, answer was 42!
    9 * 6 = 54
    Correct!
    8 * 6 = -1
    Number of questions = 4. Number of correct = 3

8.  See ex8fixme.c. This code has recurring errors among the most novice programmers. 
    Each block of code addresses one or more errors. Can you identify them and
    correct them?

9.  See ex9nim.c. Implement a variant of the the Nim game
    (see https://en.wikipedia.org/wiki/Nim). In the game, it is arbitrarily chosen
    who starts playing the game (human or computer). In this variant, there are
    13 coins in a pile, and in each turn one can take a maximum of 3 coins. You
    lose if you are forced to pick the last coin in the pile.

    Try to make a functional decomposition. Any non trivial task should be handled
    by a function. Implement the functions one at the time and test. Then use functions
    to create one round. When one round works, use a loop to run the full game.
    Example output from program:

    Welcome to NIM
    There's 13 coins in the pile
    Pick coins > 3
    Player took 3
    There's 10 coins in the pile
    Computer took 2
    There's 8 coins in the pile
    Pick coins > 0                  (force player to take correct)
    Pick coins > 4                  (force player to take correct)
    Pick coins > 3
    Player took 3
    There's 5 coins in the pile
    Computer took 2
    There's 3 coins in the pile
    Pick coins > 2
    Player took 2
    There's 1 coins in the pile  (i.e. computer forced to pick last = LOSE)
    Game over.
    Winner is: Human

10. See ex10aldern.c. This is an old exam question. Try to solve this with pen and
    paper before using the computer.

    Skriv ett program som skulle kunna vara till hjälp i kassan på Systembolaget.
    Uppgiften är att ta ett födelsedatum och kontrollera om personen är minst 20 år
    eller ej. Programmet svarar med OK eller !!! Not OK !!!.
   
    Datum matas in med åtta siffror, enligt YYYYMMDD. Dagens datum ska anges på
    samma sätt, men kan vara "hårdkodat", dvs. vara inskrivet i själva programmet.

    Tips: Detta kan lösas utan att veta antalet dagar i en månad (eller ett år).

    Ett exempel med dagens datum 20210826 (man måste vara född senast 20010826
    för att få "köpa ut", dvs. programmet ska ge OK):

        Personal number: 20010827
        !!! Not OK !!!

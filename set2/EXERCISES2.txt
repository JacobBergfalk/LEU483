*** Exercises Set 2 ***

Do as many exercises as possible *BUT* you can't spend all your time here.
Assignments are mandatory and need time. Use the leftover exercises as recap for the exam.
However, at least check out the samples before putting these exercises to the side.


*** These exercises will improve your programming skills
    (and will help you to get approved on the exam)
    but are not strictly necessary for the assignments ***

Exercises
---------
Reminder: You can apply formatting to the code by clicking on the menu 
Plugins > Source Code Formatter > Format Current Source (Ctrl + I).
    *** Use the keyboard shortcut frequently to reformat the code.
        This will make the code very much easier to understand! ***

1.  See ex1quad.c. Implement a program that solves the quadratic formula
    ax² + bx + x = 0. Use math.h functions. See comments for help. Sample runs:

    Program to solve a quadratic equation: ax² + bx + c = 0     (first run)
    Please input a > 1
    Please input b > 2
    Please input c > 3
    There are two complex conjugate roots. Can't solve will give nan
    x1 = -nan, x2 = -nan

    Program to solve a quadratic equation: ax² + bx + c = 0     (second run)
    Please input a > 1
    Please input b > 2
    Please input c > 1
    There are two equal real roots x1 = -1.000000, x2 = -1.000000

    Program to solve a quadratic equation: ax² + bx + c = 0     (last run)
    Please input a > 1
    Please input b > -2
    Please input c > -3
    There are two distinct real roots x1 = 3.000000, x2 = -1.000000


2.  See ex2easter.c. Calculate the date for Easter Sunday using a method developed
    by the mathematician C.F. Gauss. You don't need to understand the method in full.
    See comments in file. To check the result see https://www.wheniseastersunday.com/
    Example run of program:

    Input a year (1900-2099) > 2019
    Easter Sunday for 2019 is 21/4


3.  See ex3series.c. Use Leibniz's, another mathematician, formula to calculate the
    value of pi. See https://en.wikipedia.org/wiki/Leibniz_formula_for_%CF%80.
    Sample runs:

    Calculate PI. How many terms? > 10
    PI with 10 terms gives 3.041840

    Calculate PI. How many terms? > 100
    PI with 100 terms gives 3.131593

    Calculate PI. How many terms? > 10000
    PI with 10000 terms gives 3.141493


4.  See ex4puzzlers.c. Write code (directly in main) to print the patterns below.
    Decide yourself how many lines to print for each pattern. You should use:
    while loops, printf("X"), printf(" ") and printf("\n").

    X             (first pattern)
    XX
    XXX
    XXXX
    XXXXX
    XXXXXX
    XXXXXXX
    ...

    XXXXXXXXXX     (second pattern)
     XXXXXXXXXX
      XXXXXXXXXX
       XXXXXXXXXX
        ...


5.  See ex5day_nbr.c. Calculate the ordinal number of a day given a year and a date.
    See https://www.epochconverter.com/daynumbers.
    NOTE: This is an exercise in functional decomposition. Start with the top level
    function and try to decompose into smaller functions until the problem is solved.
    Try to sketch a solution before starting to code. Sample run:

    Input the year > 2019
    Input the month number > 2
    Input the day number > 12
    Ordinal number for 12/2 in 2019 is: 43

    HINT: If year is leap year will affect the result. See web how to calculate leap years.


6.  See ex6ptr.c. This is a theoretical exercise. Uncomment and try to explain results.
    Write you answers and explanations directly in the code.

7.  See ex7pekare.c This is an old exam question. Try to solve this with pen and paper before using the computer.
    Givet
    
        void test(float *a1, float *a2, float *a3) {
            // Your code here
        }

        int main() {
            // No new code in main allowed
            float a = 2;
            float *b = &a;
            float f[4];
            float *c = &f[3];

            test(f, b, c);

            printf("%.2f\n", f[2]);
        }

    lägg till kod i funktionen test så att

    a) addressen på variablen a skrivs ut.
    b) position av a3 i f[3] skrivs ut. Med andra ord, rätt utskrift är 3. Här ska du använda ``pekarmatte'' med
       funktionens parametrar för att få fram talet 3.
    c) f[2] sätts till värdet av a (dvs sista raden i main
       ska skriva ut a).

    Du ska alltså via variablerna a1, a2 och a3 se till att rätt värden skrivs ut.

8.  See ex8sin.c. This is an old exam question. Try to solve this with pen and paper before using the computer.
    Funktionen sin(x) kan uppskattas med denna serieutveckling:

        sin(x) = x - x^3 / 3! + x^5 / 5! - x^7 / 7! + ... + (-1)^n * x^(2*n + 1) / (2*n + 1)!
    
    där (2*n + 1)! är fakultet av (2*n + 1). Fakultet av n är n * (n-1) * ... * 2 * 1.
    Ju större x destor mer termer måste inkluderas i serien. 

    a)  Skriv en funktion som beräknar sin(x) enligt serien ovan. Serien ska avslutas
        när absolutbeloppet av termen som läggs till är mindre än 0.001. Full
        funktionell nedbrytning krävs för full poäng.
    
    b)  I main anropa funktionen för x = 2.0 och skriv ut resultatet. Anropa även
        den vanliga sin (ifrån math.h) och skriv ut skillnaden mellan funktionerna.

    En körning av det färdiga programmet bör se ut ungefär så här:

    sin(x) by series: 0.909296
    Difference to std. function: -0.000001
